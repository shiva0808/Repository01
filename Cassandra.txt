Cassandra cheatsheet
1. Cassandra being noSQL DB does not have Join Functionality, to overcome this DB should be normalized in such a way that joins are not requred 
   So,first queries are identified and then cassandra tables are created
2. Cassandra tables must have indexes on the column on which where caluse is expected to be executed
==========================================
NoSQL with distributed database(data can be spread over multiple machine) and big data technology
Data can be spread over multiple datacenter also
There are no master and slave
datastax.com/docs
Snitch : help in identifying nodes in cluster and tolopogy of cluster
SimpleSnitch: Default snitch (Problem : it can only be used with a cluster in one datacenter)
PropertyFileStich: in this configuration file can be defined where nodes can be mapped with rac and datacenter
(Problem:but this file needs to be updated in all nodes manually)
	130.77.100.177 =DC1.RAC1
	130.77.100.178 =DC2.RAC2
	130.77.100.179 =DC3.RAC3
	130.77.100.179 =DC3.RAC4
Problem with Propertyfile Sitch can be solved by using gossiping propery file snitch

Gossip is how nodes communicate with each other in cluster. happens every second and a node can talk to upto three nodes(this is internal communcation)
Thrift or CQL is used for external communication with cassandra like application want to talk to cassanra using thrift
Rows of a table are distributed in multiple nodes evenly, to do this partitioner is used
default partitioner is murmur3
table Row get hashed using partitioner algorigthm and generate token and then row is stored in the nodes which is handling that particular token range

Replication Factor : how manu copy of data will be kept for database and is defined at DB level

Virtual nodes or vnodes: a node instead of having only 1 token ranges can be assigned mulple small token range using this.
==========================================
Install Cassandra
cassandra.apache.org->Download->select required tar file
we need oracle java needed and above 7 is required(JDK or JRE) does not work well with openJDL
cassandra can be installed using package manager also, or can be installed from planetcassandra website also 
just untar the file and it will become installation directory
mkdir /opt/cassandra
extract the tar file there
Configuration directory
cd conf/cassandra.yaml
num_token					this is where virtualnodes or vnodes are defined
partitioner					this is where partitioner algorithm is defined
data_file_directories		This is where data storage directory is defined
endpoint_snitch				this is where snitch is defined

Directories for cassandra
mkdir /var/lib/cassandra
mkdir /var/log/cassandra
chown -R $USER:$GROUP /var/lib/cassandra
chown -R $USER:$GROUP /var/log/cassandra

starting cassandra
/installation_Directory/bin/cassandra	(background mode)
/installation_Directory/bin/cassandra -f (Forgroud mode) and just crtl+c to stop it
Stopping cassandra
ps -aux| grep cass
kill -9 <PID>

checking cassandra status
cd /installation_Directory/cassandra/bin/nodetool status
/installation_Directory/cassandra/bin/nodetool info -h 127.0.0.1		(this will give more information about the node)
/installation_Directory/cassandra/bin/nodetool ring						(it will list all the token ranges node is currently handling)

Logs
/installation_Directory/cassandra/conf/log4j-server.properties 			for log file configuration

CQLSH and Thrift is used to communicate with cassandra however cqlsh is prevalent in cassandra
/installation_Directory/bin/cqlsh

cqlsh> describe cluster

==========================================
Always name object with small letters; in case of capital letter enclose it in "" otherwise cassandra will store in small letters by default
/var/lib/cassandra/bin/cqlsh		to run SQL commands on CassandraDB

keyspace is database name in Cassandra
use <keyspace>			to switch database
describe keyspaces		to lost available keyspace`
describe keyspace <keyspace name>		to describe a keyspace
CREATE KEYSPACE vechicle_tracker WITH REPLICATION ={'class' : 'NetworkTopologyStrategy','dc1' : 3,'dc2' : 2};
drop keyspace vechicle_tracker;			It will drop keyspace



Table Operations	
-datatype needs to be checked; 
-primary key definition
-Partition key is the first column defined in primary key defition in case of composite primary key and in case only one column is defined in
 primary key then also only that particular column is used in generation of partition key.
-In case table strucutre needs to be changed then alter is not an option rather one has to delete the table and recreate the table with correct schema

create table  activity(home_id text,datetime timestamp, event text, code_used text, primary key(home_id,datetime))with clustering order by(datetime desc);
describe table <tablename>		to see the table definition
drop table <tableName>;			Dropping a table in cassandra

writing data into table
inset into activity(home_id,datetime,event,code_used) values('H01474777','2014-05-21 07:32:16','alarm_set','5599');

Copy Utility: for importing/exporting data in csv file
CSV should have header matching with column names of table(seperator |)
copy activity (home_id,datetime,event,code_used) from '/home/vm1/desktop/files/events.csv' with header = true and delimiter = '|';


thrift command(to list data)
bin/cassandra-cli
USE home_security
LIST activity



Data Write Process
Write------------------------->Memcache --(Flush)-->SSTable
				|------------->Commmitlog				
Directory
/var/lib/cassandra/data/<KeySPace>/<Tables>/	

flusing the data into sstables
bin/nodetool flush home_security

to view the file of sstables
bin/sstable2json <datadirectory/datafile-data.db>

Its not possible to run where clause on column which are not indexed.
Primary key column are indexed by default and hence where query can be executed on them
so create secondary indexes. creating secondary indexes does not speedup query.

create index <name_index> on <table_name> (<column_name>);

Composite PArtition Key: more than one key to define partition key.
It helps in restricting size of partition as partition will not grow endlessely and partition has limit as its important that partition is stored in
one node only

create table location(
vechicle_id text,
date text,
time timestamp,
latitube double,
PRIMARY KEY((vechicle_id,date),time)
)


To Limit 3 row count
select * from location limit 3;


=============================================					

gc_grace_seconds	correspons to tombstone value,defined in seconds, deleted data is retained by system till this time (describe <table> to get this value)

/var/lib/cassandra/bin/nodetool flush <DB_NAME> <Table_Name>	to flush the data in sstables

Compaction is a process where multiple sstables are merged and stored as one, it also delete the data where tombstone value has passed
bin/nodetool compact <DB_NAME> <Table_Name> 					to run compaction on sstables

TTL - time to define expiration date for the data inserted. Once TTL has expired data is marked as Tombstone and can be deleted after gc_grace_seconds passes
insert into <table> (col1,col2,col3) values (1,2,'abc') using TTL 30;			TTL is specified in seconds
update <table> using TTL 7700000 set col_name='value' where condition;
==========================================
Node Addition in Cluster
1. Name should be same cluster and need IP access and connectivity
2. update cassandra.yaml file with below parameter for all nodes	/var/lib/cassandra/conf/cassandra.yaml
	lister_address	self node IP
	rpc_address		Self node IP
3. Seed node : for a cluster to add new node we need min one seed node. for seed node,it wil be its own IP and for other node same seed node IP wil be given.
	edit cassandra.yaml file and update seeds: 	parameter
	-seeds: "IP1,IP2"
4. restart primary seed node Cassandra
	bin/cassandra -f
5. Setting up a watch (run node tool status after every 2 seconds)
	cassandra/watch -n 2 bin/nodetool status
6. Bootstrapping a nodes (Adding node in cluster)
	edit cassandra.yaml file and cluster_name parameter should have same value in all cluster nodes
	auto_bootstrap property was available in older version but in new version this parameter does not exist and is default feature
	restart the node
	bin/cassandra -f
7. Cleaning up the node:by default when node is added data gets distributed to other nodes but its not delete from existing node, so cleaning is used
	bin/nodetool -h cleanup_node_IP	cleanup
===========================================
for stress testing cassandra, there is inbuilt tool
tools/bin/cassandra-stress -d IP -n sampledata
tools/bin/cassandra-stress -d 192.168.159.101 -n 100000
tools/bin/cassandra-stress -h		stress tool help
===========================================
Repair : A node has to be repaired if it went down, or in replication factior is increased, token has been changed
To view replication factor
describe keyspace <keyspace_Name>
replication_factor: 2

Increase replication factor of Keyspace
alter keyspace "KeySpaceName" with replication ={'class':'SimpleStrategy','replication_factor':2};
bin/nodetool -h <IP of node> repair <KeySpace Name>				Keyspace name is optional
===========================================
Consistency : defines number of nodes to acknowledge the data for read or write
cqlsh>consistency			to view current consistency
cqlsh>consistency two			to update consistency to 2, there are more consistency levels
============================================
Hinted Handoff: in case node is down, data can be written in a cordinator node and once node is up data will be written there
cassandra.yaml file
hinted_handoff_enabled: true
max_hint_window_in_ms: 10800000 #3 hours
=============================================
Read Repair: configured at table level, defines repair of read data when a data read request occurs. so it updates outdated record with updated replica
describe table keyspace.table_name;
read_replica_chance=0.100000		#this is defined in percentage which means out of 10 request 1 request tigger read repair
									# 100% would mean all read request would trigger read repair and 0% means none
=============================================
Removing node from Cluster
cassandra/watch -n 2 bin/nodetool status			List the node status 
bin/nodetool -h <IP> -p 7199 decommission			-p defines the port which is for JXM communication in cassandra.yaml
=============================================
Joining a node which was removed 
1. Its better to join a old node as new node 
2. Remove all the caches and ols data from the node
	cd /var/lib/cassandra
	rm -rf commitlog data saved_caches
3. Start cassandra
	cd cassandra/bin/cassandra -f
4. It will automatically join the cluster depending on the cassandra.yaml configuration
5. Run cleanup
	bin/nodetool -h <IP> 7199 cleanup
==============================================
Removing a dead node and realigning the data and tokens in available machine
1. A dead node is identified as a node which has gone done abruptly and not planned
2. watch process of removing a dead node
	watch -n 2 bin/nodetool removenode status
3. copy node host ID from nodetool status command, this will be used in node removal process
	watch -n 2 bin/nodetool -n 2 status
4. finally run command to remove node
	bin/nodetool removenode <HostID>
5. Status can be seen in nodetool status output
===============================================
Defining cluster for multiple datacenter
1. edit cassandra.yaml file and update snitch setting on all cassandra nodes
	endpount_snitch: GossipingPropertyFileSnitch		#old snitch would be simple snitch
2. Edit cassandra-rackdc.properties files in conf directory. This file will be updated as per node Datacenter and Rack Location
	For example in node1,node2,node3 are in DC1 Rack1 then file will be DC and Rack information same, but 4th node it will change as per node
	update dc and rack parameter
3. Restart all machines(one by one)
4. update keyspace replication factor
	alter keyspace <KeySpaceName> with replication={'class':'NetworkTopologyStrategy','DC1':2,'DC2':1};
5. Repair the keyspace to that data get replicated
	bin/nodetool -h <IP> repair <keyspace_Name>