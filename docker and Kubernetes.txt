docker version					Docker version
Any Docker image has two parts 
docker File System snapshot+docker startup command

Docker installation
https://docs.docker.com/install/linux/docker-ce/ubuntu/
https://docs.docker.com/install/linux/docker-ce/fedora/
https://docs.docker.com/install/linux/docker-ce/centos/
https://docs.docker.com/install/linux/docker-ce/debian/
https://docs.docker.com/install/linux/docker-ce/ubuntu/#set-up-the-repository
After installation check 
sudo docker run hello-world
https://docs.docker.com/compose/install/#install-compose
docker-compose -v
https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user
https://docs.docker.com/install/linux/linux-postinstall/#configure-docker-to-start-on-boot
docker.hub.com		to find preconfigured docker images

systemctl start docker		Starting Docker
docker run hello-world

docker command format
docker run image <override parameters/additional command>
docker run busybox ping google.com

list all running docker running containers
docker ps

List All the containers created on this machine
docker ps --all

docker run command is actually equal to docker create and docker start command in one
docker create actualy create the container only but will not start it.start requires startup command to be given to docker container.
docker create hello-world							This will create hello-world docker container but will not start it
docker start -a <ID generated by docker container> 	This will start the container

a stopped container can be started again by below
docker ps --all
docker start -a <ID of the container>
Point to be noted here is that we can not override the default startup command given to container earlier, it will by default take earlierstartup command

deleting containers
docker system prune

retreviing output logs of container
docker logs <container ID>

Stopping a container
SIGTERM and SIGKILL
docker stop <container ID>
docker kill <container ID>
docker stop send docker kill automatically after 10 seconds in case docker process does not respond to SIGTERM.

Example of setting up and running radis server and how to run command in container
docker run radis
docker exec it <container ID> <command>
-it means allow input to container
docker ps
docker exec -it <container ID> radis-cli

Getting a command prompt inside a container
in case container is running on linux machine 
docker exec -it <container ID> sh
it will open shell prompt and ready to take commands

sending command to docker image at start itself
docker run -it busybox sh

================================Creating customizing docker image
create a working directory
mkdir radis-image
cd redis-image
create a file name Dockerfile
vi Docerfile
# Use a existing base image
FROM alpine
#Install dependenday package
RUN apk add --update redis

#tell the image what to do when start a container
CMD ["redis-server"]

Save the file and execute below command to create custom image
docker build .

Cache Logic
Always remember in case creating new custom image again n again(same as existing image) docker will execute the complete process rather it will 
pick up from cache for exiting image and if it find that similar image was created it will use cache and create a new image. Sequence of command mentioned
in RUN also matter if order is different then proccess will be executed again and will not be picked from cache

tagging a image
docker build -t user_id/image:version .
docker run user_id/image:version

Image from Container
an image can be created from a container so its possible that a container is running and after making changes new container can be created
to do this follow below steps
docker ps
docker commit -c "CMD '["redis-server"]' <ID of contaier>
docker run <ID of the image>

========================================
copy file from local server to docker image, in Dockerfile add below lone to copye file from source to destination
COPY ./ ./

Container to OS port mapping(this is done dynamically)
docker run -p <server port>:<container port> image_name
docker run -p 8080:8080 simpleweb

Sprcifiying the working directory in docker image : notmally COPY instruction will copy the file in root, this will set default working directory
and all command and files will be places in this directory
WORKDIR /usr/app

========================================
Practical
Dockerfile
FROM node:alpine
WORKDIR '/app'
COPY package.json
run npm install
COPY . .
CMD ["npm","start"]

configure radis server container
docker run redis

========================================
Docker Compose
it help kind of writing code for docker so that thigs can be automated without manually typing everything again n again
for example networking, it will setup networking between containers internally, all have to do is provide port of the application running inside container
rest docker compose manager internally. there is no need to give IP of the docker container or extenal port of the docker container only image name is 
sufficient(for example database location, only contaier name is enough to point to the docker container)
below command must in executed in same directory where docker-compose file is located

vi docker-compose
version 3
services:
	redis-server:
		image: "redis"
	node-app
		build: .
		ports:
			-"8080:8080"							server_port:container_port


docker-componse up								running docker compose
docker-compose up --build						to rebuild the docker compose
docker-compose up -d							to start group in container in background
docker-compose down								to bring down the docker compose containers

===========================================
Restart policy in docker compose
"no"			Never Restart a container if it stops
always		if container stops, restart it 
on-failure	Only Restart if container failed on certain error code(error code other than 0)
unless-stopped		Always restart until forcibly stopped

vi docker-compose
version 3
services:
	redis-server:
		image: "redis"
	node-app
		restart: always
		build: .
		ports:
			-"8080:8080"

==========================================			
docker-compose -pl				To list down docker compose container status

running docker file with a extension
docker build -f Dockerfile.dev . //Here file has .dev exntension


Docker Volume
docker volume help in setting up reference to the file in the host. so any change done in file in host reflect automatically in container
in below command we want to map all content of /app folder directory in container with present directory in host except /app/node_module in container
docker run -p 3000:3000 -v /app/node_module -v $($pwd):/app <container_ID>
-v $($pwd):/app host:container mapping
-v /app/node_module container folder is not mapped to host, thus indicating not to sync this folder

docker compose example where docker filename is different
vi Docker-compose.yml
version: '3'
services:
web:
build:
context: .
dockerfile: Dockerfile.dev
port:
-"3000":"3000"
volumes
- /app/node_module //do not set reference for this contaier directory to host machine
- .:/app //set app directory reference(in conatainer) to present working directory of where this command executes
===========================================
